[{"/Users/amittal/projects/optimg/client/src/components/Home.tsx":"1","/Users/amittal/projects/optimg/client/src/index.tsx":"2","/Users/amittal/projects/optimg/client/src/pages/Compare.tsx":"3","/Users/amittal/projects/optimg/client/src/pages/Optimize.tsx":"4","/Users/amittal/projects/optimg/client/src/pages/Gallery.tsx":"5","/Users/amittal/projects/optimg/client/src/pages/Image.tsx":"6","/Users/amittal/projects/optimg/client/src/components/Drawer.tsx":"7","/Users/amittal/projects/optimg/client/src/Routes.tsx":"8","/Users/amittal/projects/optimg/client/src/components/SizeCompare.tsx":"9","/Users/amittal/projects/optimg/client/src/reportWebVitals.ts":"10","/Users/amittal/projects/optimg/client/src/App.tsx":"11","/Users/amittal/projects/optimg/client/src/components/Stat.tsx":"12"},{"size":2275,"mtime":1612530515630,"results":"13","hashOfConfig":"14"},{"size":479,"mtime":1612023825153,"results":"15","hashOfConfig":"14"},{"size":874,"mtime":1610385230719,"results":"16","hashOfConfig":"14"},{"size":7137,"mtime":1611666680731,"results":"17","hashOfConfig":"14"},{"size":2909,"mtime":1612530415713,"results":"18","hashOfConfig":"14"},{"size":2095,"mtime":1611402656183,"results":"19","hashOfConfig":"14"},{"size":1229,"mtime":1611319658433,"results":"20","hashOfConfig":"14"},{"size":904,"mtime":1611397997452,"results":"21","hashOfConfig":"22"},{"size":519,"mtime":1611405112145,"results":"23","hashOfConfig":"14"},{"size":425,"mtime":1609596182435,"results":"24","hashOfConfig":"14"},{"size":1432,"mtime":1612023866682,"results":"25","hashOfConfig":"14"},{"size":867,"mtime":1612529889996,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"dbj1sp",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1n94gl8",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amittal/projects/optimg/client/src/components/Home.tsx",["59","60","61","62","63"],"import { Space, Table, Tag } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport Column from 'antd/lib/table/Column';\nimport React, { ReactElement } from 'react';\nimport Stat from './Stat';\nconst { ColumnGroup } = Table;\n\ninterface Props {}\n\nconst data = [\n  {\n    key: '1',\n    rundate: new Date().toLocaleDateString(),\n    source: '/mnt',\n    destination: '/images',\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '2',\n    rundate: new Date().toLocaleDateString(),\n    source: '/mnt',\n    destination: '/images',\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '3',\n    rundate: new Date().toLocaleDateString(),\n    source: '/mnt',\n    destination: '/images',\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '4',\n    rundate: new Date().toLocaleDateString(),\n    source: '/mnt',\n    destination: '/images',\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n];\n\nexport default function Home({}: Props): ReactElement {\n    const handleAction = (evt:any) => {\n        console.log(evt)\n    }\n  return (\n    <div>\n      <div className=\"flex justify-between\">\n        {Array.from({ length: 4 }).map(item => {\n          return (\n            <Stat\n              title=\"Total Images\"\n              value=\"1000\"\n              actions={['JPEG', 'AVIF']}\n              onAction={handleAction}\n            />\n          );\n        })}\n      </div>\n      <section>\n        <Title level={3}>All Runs</Title>\n        <hr />\n        <Table dataSource={data}>\n          <Column title=\"#\" dataIndex=\"key\" key=\"key\" />\n\n          <Column title=\"Date\" dataIndex=\"rundate\" key=\"rundate\" />\n          <Column title=\"Source\" dataIndex=\"source\" key=\"source\" />\n          <Column\n            title=\"Destination\"\n            dataIndex=\"destination\"\n            key=\"destination\"\n          />\n          <Column\n            title=\"Action\"\n            key=\"action\"\n            render={(text, record: any) => (\n              <Space size=\"middle\">\n                <a>Invite {record.lastName}</a>\n                <a>Delete</a>\n              </Space>\n            )}\n          />\n        </Table>\n      </section>\n    </div>\n  );\n}\n","/Users/amittal/projects/optimg/client/src/index.tsx",[],["64","65"],"/Users/amittal/projects/optimg/client/src/pages/Compare.tsx",["66","67","68"],"import 'two-up-element';\n\nimport React, { ReactElement } from 'react';\nimport Title from 'antd/lib/typography/Title';\n\ndeclare global {\n    namespace JSX {\n      interface IntrinsicElements {\n        'two-up': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>; // Normal web component; // Normal web component\n       \n      }\n    }\n  }\n\ninterface Props {}\n\nexport default function Compare({}: Props): ReactElement {\n  return (\n    <div>\n        <div className=\"flex justify-between items-baseline\">\n            <Title level={4}>Original Image</Title>\n            <Title level={4}>Converted Image</Title>\n        </div>\n      <two-up>\n        <div><img src=\"https://via.placeholder.com/1024/0000FF\" className=\"w-full\" /></div>\n        <div><img src=\"https://via.placeholder.com/1024/FF00FF\" className=\"w-full\" /></div>\n      </two-up>\n    </div>\n  );\n}\n",["69","70"],"/Users/amittal/projects/optimg/client/src/pages/Optimize.tsx",["71","72","73"],"import { Alert, Button, Form, Input, Radio, Select, Slider } from 'antd';\nimport Title from 'antd/lib/typography/Title';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport React, { ReactElement, useReducer, useState } from 'react';\nimport './optimize.css';\nimport Checkbox from 'antd/lib/checkbox/Checkbox';\nimport { useMutation } from 'react-query';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { Redirect } from 'react-router-dom';\nconst { Option } = Select;\n\ninterface Transformation {\n  format: string;\n  quality: number;\n}\n\ninterface Operation {\n  sourcePath: string;\n  targetPath: string;\n  transformations: Transformation[];\n}\ninterface Action {\n  type: string;\n  data?: any;\n  index?: number;\n}\n\ninterface Props {}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 },\n  },\n  wrapperCol: {\n    xs: { span: 24, display: 'flex' },\n    sm: { span: 20, display: 'flex' },\n  },\n};\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 0 },\n  },\n};\n\nconst initialState: Operation = {\n  sourcePath: '',\n  targetPath: '',\n  transformations: [\n    { format: '10', quality: 75 },\n    { format: '2', quality: 75 },\n    { format: '0', quality: 75 },\n  ],\n};\nfunction Reducer(state: Operation = initialState, action: Action): Operation {\n  switch (action.type) {\n    case 'setSourcePath':\n      return { ...state, sourcePath: action.data };\n\n    case 'setTargetPath':\n      return { ...state, targetPath: action.data };\n\n    case 'changeQuality':\n      return {\n        ...state,\n        transformations: state.transformations.map(\n          (item: any, index: number) => {\n            if (index === action.index) {\n              return { ...item, quality: action.data };\n            }\n            return item;\n          }\n        ),\n      };\n    case 'changeFormat':\n      return {\n        ...state,\n        transformations: state.transformations.map(\n          (item: any, index: number) => {\n            if (index === action.index) {\n              return { ...item, format: action.data };\n            }\n            return item;\n          }\n        ),\n      };\n    case 'addVarient':\n      return {\n        ...state,\n        transformations: [\n          ...state.transformations,\n          { quality: 75, format: '10' },\n        ],\n      };\n    case 'removeVarient':\n      return {\n        ...state,\n        transformations: state.transformations.filter(\n          (transformation: any, index: number) => index !== action.index\n        ),\n      };\n    default:\n      return state;\n  }\n}\n\nfunction Optimize({}: Props): ReactElement {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  const { isError, isLoading, mutateAsync, isSuccess, error } = useMutation<\n    any,\n    any\n  >(() => {\n    let body = JSON.parse(JSON.stringify(state));\n    body.transformations = body.transformations.map((transform: any) => ({\n      ...transform,\n      format: parseInt(transform.format),\n    }));\n    return fetch('/api/optimize', {\n      body: JSON.stringify(body),\n      method: 'POST',\n    }).then( async (res: Response) => {\n      if (res.ok) return res.json();\n         return Promise.reject(await res.json());\n    })\n  });\n\n  const [form] = Form.useForm();\n \n  if (isSuccess) {\n    return <Redirect to=\"/gallery\" />;\n  }\n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n  return (\n    <div>\n      <Title level={3}>Optimize</Title>\n      {isError && <Alert\n      message={(error.msg)}\n      description={error.message}\n      type=\"error\"\n      closable\n     \n    />}\n      <Form\n        layout=\"vertical\"\n        form={form}\n        initialValues={{ layout: 'vertical' }}\n        onValuesChange={() => {}}\n        onSubmitCapture={() => {\n          console.log(state);\n        }}\n      >\n        <Form.Item label=\"Source Path\">\n          <Input\n            placeholder=\"Source Path eg. /mnt/images/source\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              dispatch({ type: 'setSourcePath', data: e.currentTarget.value })\n            }\n          />\n        </Form.Item>\n        <Form.Item label=\"Destination Path\">\n          <Input\n            placeholder=\"Destination Path eg. /mnt/images/target\"\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              dispatch({ type: 'setTargetPath', data: e.currentTarget.value })\n            }\n          />\n        </Form.Item>\n        <Checkbox onChange={() => {}}>Copy Unknown</Checkbox>\n        <Checkbox onChange={() => {}}>Monitor</Checkbox>\n\n        {state.transformations.map((field: any, index: number) => (\n          <Form.Item\n            style={{ display: 'flex' }}\n            {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n            label={index === 0 && <Title level={3}>Varients</Title>}\n            required={false}\n            key={field.key}\n          >\n            <Form.Item label=\"Format\" style={{ display: 'inline-block' }}>\n              <Select\n                value={field['format']}\n                style={{ width: '160px' }}\n                placeholder=\"Select Format\"\n                onChange={(e: any) =>\n                  dispatch({ type: 'changeFormat', index, data: e })\n                }\n              >\n                <Option value=\"10\">AVIF</Option>\n                <Option value=\"2\">WebP</Option>\n                <Option value=\"1\">JPEG</Option>\n                <Option value=\"0\">Source Format</Option>\n              </Select>\n            </Form.Item>\n            <Form.Item\n              label=\"Quality\"\n              style={{\n                display: 'inline-block',\n                margin: '0px 20px',\n                width: 'calc( 50% - 100px) ',\n              }}\n            >\n              <Slider\n                tooltipVisible={true}\n                tooltipPlacement=\"top\"\n                onChange={(e: any) => {\n                  console.log(e);\n                  dispatch({ type: 'changeQuality', index, data: e });\n                }}\n                value={field['quality']}\n              />\n            </Form.Item>\n\n            {state.transformations.length > 1 && (\n              <MinusCircleOutlined\n                style={{ display: 'inline-block', margin: '35px auto' }}\n                className=\"dynamic-delete-button\"\n                onClick={() => dispatch({ type: 'removeVarient', index })}\n              />\n            )}\n          </Form.Item>\n        ))}\n        <Form.Item>\n          <Button\n            type=\"dashed\"\n            onClick={() => dispatch({ type: 'addVarient' })}\n            style={{ width: '60%' }}\n            icon={<PlusOutlined />}\n          >\n            Add Varient\n          </Button>\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            onClick={async () => {\n              try{\n                await mutateAsync();\n              } catch(e){\n                console.log(e)\n              }\n             \n            }}\n          >\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default Optimize;\n","/Users/amittal/projects/optimg/client/src/pages/Gallery.tsx",["74"],"import { Card, Col, Pagination, Row } from 'antd';\nimport Meta from 'antd/lib/card/Meta';\nimport React, { ReactElement } from 'react';\nimport { useQuery } from 'react-query';\nimport { Spin } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { LinkOutlined } from '@ant-design/icons';\n\ninterface ParamTypes {\n  pageNo: string;\n  path: string;\n}\n\ninterface Props {}\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nconst PageSize = 15;\n\nfunction Gallery({}: Props): ReactElement {\n  const history = useHistory();\n  const { pageNo = '1', path = '/' } = useParams<ParamTypes>();\n  const { data, isError, isLoading } = useQuery(\n    ['galleryData', pageNo, path],\n    () => {\n      const params = new URLSearchParams();\n      params.set('page', pageNo);\n      params.set('path', path);\n      return fetch(`/api/gallery?${params.toString()}`).then(res => res.json());\n    }\n  );\n  return (\n    <>\n      {isLoading && <Spin indicator={antIcon} />}\n      {!isLoading && !isError && (\n        <div>\n          <Row gutter={[16, 16]}>\n            {data.images && data.images.map((image: any) => (\n              <Col span={8} xxl={4} xl={6} md={8} sm={12} xs={16}>\n                <Card\n                  hoverable\n                  // style={{ width: 240 }}\n                  actions={[\n                    <Link\n                      to={`/image/${encodeURIComponent(\n                        image.image.path\n                      )}/${encodeURIComponent(image.image.name)}`}\n                    >\n                      <LinkOutlined key=\"open\" />\n                    </Link>,\n                  ]}\n                  cover={\n                    <img\n                      alt=\"example\"\n                      src={`/api/static/source/${image.image.path}/${image.image.name}`}\n                    />\n                  }\n                >\n                  <Meta\n                    title={image.image.name}\n                    description={\n                      <section>\n                        <div>\n                          Size: {Math.floor(image.image.size / 1024)} KB\n                        </div>\n                        <div>Varients: {image.varients.length}</div>\n                      </section>\n                    }\n                  />\n                </Card>\n              </Col>\n            ))}\n          </Row>\n\n          <div className=\"flex justify-end my-4\">\n            <Pagination\n              defaultCurrent={data.currentPage}\n              total={data.totalPages * PageSize}\n              defaultPageSize={PageSize}\n              showSizeChanger={false}\n              onChange={(page: number) => {\n                history.push(`/gallery/${encodeURIComponent(path)}/${page}`);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Gallery;\n","/Users/amittal/projects/optimg/client/src/pages/Image.tsx",["75","76"],"import { Card, Col, Row } from 'antd';\nimport Meta from 'antd/lib/card/Meta';\nimport Title from 'antd/lib/typography/Title';\nimport React, { ReactElement } from 'react';\nimport { useQuery } from 'react-query';\nimport { useParams } from 'react-router-dom';\nimport SizeCompare from '../components/SizeCompare';\n\ninterface Props {}\n\ninterface ParamTypes {\n  path: string;\n  name: string;\n}\n\nfunction Image({}: Props): ReactElement {\n  const { path = '/', name } = useParams<ParamTypes>();\n  const { data, isError, isLoading } = useQuery<any>(\n    ['getImagedata', path, name],\n    () => {\n      const params = new URLSearchParams();\n      params.set('path', path);\n      params.set('name', name);\n      return fetch(`/api/image?${params.toString()}`).then((res: Response) =>\n        res.json()\n      );\n    }\n  );\n  if (isLoading) return <div>Loading...</div>;\n  if (isError) return <div>Error...</div>;\n  return (\n    <div>\n      <div>\n        <img\n          src={`/api/static/source/${encodeURIComponent(\n            path\n          )}/${encodeURIComponent(name)}`}\n          className=\"w-6/12 m-auto\"\n        />\n      </div>\n      <Title level={3} className=\"my-4\">\n        Varients\n      </Title>\n\n      <Row>\n        {data.varients.map((varient: any) => (\n          <Col span={8}>\n            <Card\n              hoverable\n              style={{ width: 240 }}\n              cover={\n                <img\n                  alt=\"example\"\n                  src={`/api/static/dest/${encodeURIComponent(varient.path)}/${\n                    varient.name\n                  }`}\n                />\n              }\n            >\n              <Meta\n                title={varient.name}\n                description={\n                 <SizeCompare percentage={getSizePercentage(data.image.size, varient.size)} />\n                }\n              ></Meta>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n\nconst getSizePercentage = (baseSize: number, targetSize: number) => {\n  return Math.round(((targetSize - baseSize) * 10000) / targetSize) / 100;\n};\n\nexport default Image;\n",["77","78"],"/Users/amittal/projects/optimg/client/src/components/Drawer.tsx",["79","80","81"],"/Users/amittal/projects/optimg/client/src/Routes.tsx",["82","83"],"/Users/amittal/projects/optimg/client/src/components/SizeCompare.tsx",[],"/Users/amittal/projects/optimg/client/src/reportWebVitals.ts",[],"/Users/amittal/projects/optimg/client/src/App.tsx",[],"/Users/amittal/projects/optimg/client/src/components/Stat.tsx",[],{"ruleId":"84","severity":1,"message":"85","line":1,"column":24,"nodeType":"86","messageId":"87","endLine":1,"endColumn":27},{"ruleId":"84","severity":1,"message":"88","line":6,"column":9,"nodeType":"86","messageId":"87","endLine":6,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":45,"column":30,"nodeType":"91","messageId":"92","endLine":45,"endColumn":39},{"ruleId":"93","severity":1,"message":"94","line":81,"column":17,"nodeType":"95","endLine":81,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":82,"column":17,"nodeType":"95","endLine":82,"endColumn":20},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"89","severity":1,"message":"90","line":17,"column":33,"nodeType":"91","messageId":"92","endLine":17,"endColumn":42},{"ruleId":"100","severity":1,"message":"101","line":25,"column":14,"nodeType":"95","endLine":25,"endColumn":86},{"ruleId":"100","severity":1,"message":"101","line":26,"column":14,"nodeType":"95","endLine":26,"endColumn":86},{"ruleId":"96","replacedBy":"102"},{"ruleId":"98","replacedBy":"103"},{"ruleId":"84","severity":1,"message":"104","line":1,"column":38,"nodeType":"86","messageId":"87","endLine":1,"endColumn":43},{"ruleId":"84","severity":1,"message":"105","line":4,"column":43,"nodeType":"86","messageId":"87","endLine":4,"endColumn":51},{"ruleId":"89","severity":1,"message":"90","line":108,"column":19,"nodeType":"91","messageId":"92","endLine":108,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":20,"column":18,"nodeType":"91","messageId":"92","endLine":20,"endColumn":27},{"ruleId":"89","severity":1,"message":"90","line":16,"column":16,"nodeType":"91","messageId":"92","endLine":16,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":34,"column":9,"nodeType":"95","endLine":39,"endColumn":11},{"ruleId":"96","replacedBy":"106"},{"ruleId":"98","replacedBy":"107"},{"ruleId":"84","severity":1,"message":"108","line":12,"column":9,"nodeType":"86","messageId":"87","endLine":12,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":17,"column":17,"nodeType":"91","messageId":"92","endLine":17,"endColumn":26},{"ruleId":"100","severity":1,"message":"101","line":26,"column":9,"nodeType":"95","endLine":26,"endColumn":32},{"ruleId":"84","severity":1,"message":"109","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":14},{"ruleId":"89","severity":1,"message":"90","line":14,"column":17,"nodeType":"91","messageId":"92","endLine":14,"endColumn":26},"@typescript-eslint/no-unused-vars","'Tag' is defined but never used.","Identifier","unusedVar","'ColumnGroup' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["110"],"no-negated-in-lhs",["111"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["110"],["111"],"'Radio' is defined but never used.","'useState' is defined but never used.",["110"],["111"],"'SubMenu' is assigned a value but never used.","'Navbar' is defined but never used.","no-global-assign","no-unsafe-negation"]